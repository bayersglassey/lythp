
Can we support kwargs, *, **, /, etc?.. YES:

    (def f (x [/] y [*args] z [**kwargs]))
    (def f ([x 0] [/] [y 1] [*args] [z 3] [**kwargs]))
    (f 1 2 [*args] [z 3] [**kwargs])

Add: set literals

    (:dict 'x' 1 'y' 2)
    (:set 1 2 3)
    (:list 1 2 3)
    (:tuple 1 2 3)
    (:quote x)
    (:quote (def f (x) (+ x 1)))
    (:dictcomp i (* i 2) (for i (range 5)))
    (:listcomp (* i 2) (for i (range 5)))
    (:setcomp (* i 2) (for i (range 5)))
    (:genexp (* i 2) (for i (range 5)))
    ...etc...

=========================================================================

Add: continue, break, return, try/except/finally, global

Add: macros?.. they won't be quite the same as usual LISP macros since
our s-expressions aren't simple Python types.
Or actually, they are, but they're 2-tuples whose second element is often
a Python list. O_o
How do we quote things?..
Can't use "`", Python tokenizer says it's an error.
I guess we use a 'quote' function, e.g. (assert (== (quote x) (, 'name' 'x')))
...or we could use "," for quote, and use something else for tuples...

Understand INDENT/DEDENT token types. Could we use them?..

Can we support comprehensions?.. yup:

    >>> [(i, j) for i in range(3) for j in range(3) if not (i + j) % 2]
    [(0, 0), (0, 2), (1, 1), (2, 0), (2, 2)]

    # In lythp, without a dedicated comprehension function:
    (do
        (= xs [])
        (for i (range 3)
            (for j (range 3)
                (if ((not (% (+ i j) 2))
                    ((. xs append) (, i j))
                ))
            )
        )
        xs
    )

    # In lythp, with a theoretical comprehension function:
    (listcomp (, i j)
        (for i (range 3))
        (for j (range 3))
        (if (not (% (+ i j) 2)))
    )

    # Can we define the comprehension function with macros?..
    (def listcomp (val (*clauses))
        (for clause clauses
            ...ummmm...
        )
    )

Can we add an import hook so we can write modules as .lsp files?..
*** THEN WE COULD USE DOCTEST!!!!

Do we care about metaclass support?.. see enum.lsp
